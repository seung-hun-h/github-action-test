/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    java
    war
    checkstyle
    jacoco
    id("com.github.spotbugs") version "5.0.14"
    id("com.palantir.docker") version "0.35.0"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web:2.1.7.RELEASE")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:2.1.7.RELEASE")
    implementation("org.springframework.boot:spring-boot-starter-security:2.1.7.RELEASE")
    implementation("javax.servlet:jstl:1.2")
    implementation("org.webjars:bootstrap:3.3.6")
    implementation("org.webjars:bootstrap-datepicker:1.0.1")
    implementation("org.webjars:jquery:1.9.1")
    implementation("com.h2database:h2:1.4.199")
    implementation("org.springframework.boot:spring-boot-devtools:2.1.7.RELEASE")
    implementation("org.apache.tomcat.embed:tomcat-embed-jasper:9.0.22")
    implementation("org.springframework.boot:spring-boot-starter-tomcat:2.1.7.RELEASE")
    testImplementation("org.springframework.boot:spring-boot-starter-test:2.1.7.RELEASE")
}

group = "com.in28minutes.springboot.web"
version = "0.0.1-SNAPSHOT"
description = "todo-web-application-h2"
java.sourceCompatibility = JavaVersion.VERSION_11

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"
}

tasks.jar {
    enabled = false
}

val war = tasks.named("war").get()

tasks.getByName("dockerPrepare", Copy::class) {
    dependsOn(war)
    from(war.outputs.files.singleFile)
    into("build/docker")
    duplicatesStrategy = DuplicatesStrategy.FAIL
}

docker {
    name = "dau47/02-todo-web-application-h2:$version"
    dependsOn(war)
    buildArgs(mapOf("WAR_FILE" to war.outputs.files.singleFile.name))
    push(true)
    noCache(true)
}

checkstyle {
    configFile = file("${project.rootDir}/tool/naver-checkstyle-rules.xml")
    configProperties = mapOf("suppressionFile" to "${project.rootDir}/tool/naver-checkstyle-suppressions.xml")
    toolVersion = "8.45.1"
    isIgnoreFailures = false
    maxErrors = 0
    maxWarnings = 0
}

spotbugs {
    ignoreFailures.set(false)
    reportLevel.set(com.github.spotbugs.snom.Confidence.HIGH)
}

tasks.register("printSpotbugsMain") {
    doLast {
        val mainResult = file("${buildDir}/reports/spotbugs/main.text")
        if (mainResult.exists()) {
            mainResult.readLines().forEach {
                println(it)
            }
        }
    }
}

tasks.getByPath("spotbugsMain").finalizedBy("printSpotbugsMain")

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory.set(layout.buildDirectory.dir("${buildDir}/reports/jacoco"))
}

tasks.jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(file("${buildDir}/classes/java/main"))
    }

    reports {
        xml.required.set(true)
        xml.outputLocation.set(file("${buildDir}/reports/jacoco/jacoco.xml"))
        csv.required.set(false)
        html.required.set(true)
        html.outputLocation.set(file("${buildDir}/reports/jacoco/html"))
    }
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = "LINE"
                // minimum = 0.3
            }
        }
    }
}

tasks.check {
    dependsOn (tasks.jacocoTestCoverageVerification)
}

